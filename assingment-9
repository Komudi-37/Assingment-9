/*Assignment-Object Oriented Programming
Design and implement an object-oriented solution for a Student Management System
that demonstrates a comprehensive understanding of C++ class concepts
Problem Statement
A local university requires a software system to manage student information efficiently. The
system should provide functionality to:
• Create and manage student records
• Track student academic information
• Perform basic operations on student data
System Requirements

1. Student Class Design
   Develop a Student class with the following specifications:
   • Private data members to store:
   o Student name
   o Roll number
   o CGPA
   o List of enrolled courses
   • Constructors:
   o Default constructor
   o Parameterized constructor to initialize basic student details
   o Copy constructor
   • Destructor to handle resource cleanup
2. Student Management Functionality
   Implement methods in the Student class to:
   • Add new courses to a student's record
   • Update student CGPA
   • Display complete student information
   • Validate input data (e.g., CGPA range, course addition)
3. Student Management System Class
   Create a StudentManagementSystem class with capabilities to:
   • Add new students to the system
   • Search for students by roll number
   • Display all student records
   • Manage a collection of student objects
   Functional Requirements
   The system should support the following operations:
4. Create student records with different initialization methods
5. Add courses to a student's academic record
6. Update academic performance (CGPA)
7. Retrieve and display student information
8. Perform basic error checking and input validation*/
#include <iostream>
#include <vector>
#include <map>
#include <stdexcept>
#include <limits>
using namespace std;

class UniversitySystemException : public exception {
    string message;
public:
    UniversitySystemException(const string& msg) : message(msg) {}
    const char* what() const noexcept override { return message.c_str(); }
};

class EnrollmentException : public UniversitySystemException {
public:
    EnrollmentException(const string& msg) : UniversitySystemException(msg) {}
};

class GradeException : public UniversitySystemException {
public:
    GradeException(const string& msg) : UniversitySystemException(msg) {}
};

class PaymentException : public UniversitySystemException {
public:
    PaymentException(const string& msg) : UniversitySystemException(msg) {}
};

class Person {
protected:
    string name;
    int age;
    string ID;
    string contactInfo;

public:
    Person(const string& name, int age, const string& ID, const string& contactInfo)
        : name(name), age(age), ID(ID), contactInfo(contactInfo) {
        setAge(age);
    }
    virtual ~Person() {}

    void setAge(int a) {
        if (a <= 0 || a > 100) throw invalid_argument("Invalid age");
        age = a;
    }

    virtual void displayDetails() const {
        cout << "Name: " << name << ", Age: " << age << ", ID: " << ID << ", Contact: " << contactInfo << endl;
    }

    virtual double calculatePayment() const { return 0.0; }
};

class Student : public Person {
protected:
    string enrollmentDate, program;
    float GPA;

public:
    Student(const string& name, int age, const string& ID, const string& contact,
        const string& enrollmentDate, const string& program, float GPA)
        : Person(name, age, ID, contact), enrollmentDate(enrollmentDate), program(program) {
        setGPA(GPA);
    }

    void setGPA(float g) {
        if (g < 0.0 || g > 4.0) throw invalid_argument("Invalid GPA");
        GPA = g;
    }

    void displayDetails() const override {
        Person::displayDetails();
        cout << "Program: " << program << ", GPA: " << GPA << endl;
    }
};

class Professor : public Person {
protected:
    string department, specialization, hireDate;

public:
    Professor(const string& name, int age, const string& ID, const string& contact,
        const string& dept, const string& spec, const string& hireDate)
        : Person(name, age, ID, contact), department(dept), specialization(spec), hireDate(hireDate) {}

    void displayDetails() const override {
        Person::displayDetails();
        cout << "Department: " << department << ", Specialization: " << specialization << endl;
    }
};

class Course {
    string code, title, description;
    int credits;
    Professor* instructor;

public:
    Course(string code, string title, int credits, string desc, Professor* instr)
        : code(code), title(title), description(desc), credits(credits), instructor(instr) {
        if (credits <= 0) throw invalid_argument("Invalid credits");
    }

    string getCode() const { return code; }
    string getTitle() const { return title; }
    Professor* getInstructor() const { return instructor; }
};

class Department {
    string name, location;
    double budget;
    vector<Professor*> professors;

public:
    Department(string name, string location, double budget)
        : name(name), location(location), budget(budget) {}

    void addProfessor(Professor* p) { professors.push_back(p); }
    vector<Professor*> getProfessors() const { return professors; }
};

class GradeBook {
    map<string, float> studentGrades; // ID -> grade

public:
    void addGrade(const string& studentID, float grade) {
        if (grade < 0 || grade > 100) throw GradeException("Invalid grade value");
        studentGrades[studentID] = grade;
    }

    float calculateAverageGrade() {
        float sum = 0;
        for (auto& entry : studentGrades) sum += entry.second;
        return studentGrades.empty() ? 0 : sum / studentGrades.size();
    }
};

class EnrollmentManager {
    map<string, vector<string>> courseEnrollments; 

public:
    void enrollStudent(const string& courseCode, const string& studentID) {
        courseEnrollments[courseCode].push_back(studentID);
    }

    void dropStudent(const string& courseCode, const string& studentID) {
        auto& students = courseEnrollments[courseCode];
        students.erase(remove(students.begin(), students.end(), studentID), students.end());
    }
};

void testPolymorphism() {
    vector<Person*> people;
    people.push_back(new Student("Alice", 20, "S01", "alice@example.com", "2022", "CS", 3.8));
    people.push_back(new Professor("Dr. Bob", 45, "P01", "bob@uni.edu", "CS", "AI", "2015"));

    for (Person* p : people) {
        p->displayDetails();
        cout << "Payment: " << p->calculatePayment() << "\n\n";
        delete p;
    }
}

int main() {
    try {
        Department csDept("Computer Science", "Block A", 100000);
        Professor* prof1 = new Professor("Dr. Smith", 50, "P02", "smith@uni.edu", "CS", "ML", "2010");
        csDept.addProfessor(prof1);

        Course algo("CS101", "Algorithms", 4, "Introduction to algorithms", prof1);
        Student s1("John", 19, "S101", "john@gmail.com", "2023", "CS", 3.6);

        GradeBook gb;
        gb.addGrade("S101", 88);
        cout << "Average Grade: " << gb.calculateAverageGrade() << endl;

        EnrollmentManager em;
        em.enrollStudent("CS101", "S101");

        testPolymorphism();

        delete prof1;
    }
    catch (UniversitySystemException& ex) {
        cerr << "University System Error: " << ex.what() << endl;
    }
    catch (exception& ex) {
        cerr << "Error: " << ex.what() << endl;
    }

    return 0;
}
